{
	"info": {
		"_postman_id": "855c48a3-b256-47c9-b10b-97377fb9ff1d",
		"name": "Meta project",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28610432"
	},
	"item": [
		{
			"name": "clients",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"if (response != null) {",
									"    pm.collectionVariables.set(\"client_id\", response)",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"William\",\n    \"email\": \"will@gmail.com\",\n    \"cpf\": \"436.377.998-55\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/clients",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"William\",\n    \"email\": \"will@gmail.com\",\n    \"cpf\": \"436.377.998-55\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "2"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 21:59:28 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "31"
						},
						{
							"name": "invalid payload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"will@gmail.com\",\n    \"cpf\": \"436.377.998-55\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "587"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:09:22 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "Validation failed for argument [0] in public org.springframework.http.ResponseEntity<java.lang.String> com.gazaltech.meta.infrastructure.controllers.ClientController.createClient(com.gazaltech.meta.application.dtos.CreateClientDTO): [Field error in object 'createClientDTO' on field 'name': rejected value [null]; codes [NotNull.createClientDTO.name,NotNull.name,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [createClientDTO.name,name]; arguments []; default message [name]]; default message [Name is required]] "
						}
					]
				},
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/clients/id",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get by id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/clients/{{client_id}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 21:59:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 31,\n    \"name\": \"William\",\n    \"email\": \"will@gmail.com\",\n    \"cpf\": \"436.377.998-55\",\n    \"address\": null\n}"
						},
						{
							"name": "not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/clients/{{client_id}}"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "16"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:00:12 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Client not found"
						},
						{
							"name": "bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/clients/id"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "131"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:01:59 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "Method parameter 'id': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: \"id\""
						}
					]
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clients?size=10&page=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clients"
							],
							"query": [
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "page",
									"value": "0"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get all without addresses",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/clients?size=10&page=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:02:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 23,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    },\n    {\n        \"id\": 24,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    },\n    {\n        \"id\": 25,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    },\n    {\n        \"id\": 26,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    },\n    {\n        \"id\": 27,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    },\n    {\n        \"id\": 28,\n        \"name\": null,\n        \"email\": null,\n        \"cpf\": null,\n        \"address\": null\n    },\n    {\n        \"id\": 29,\n        \"name\": null,\n        \"email\": null,\n        \"cpf\": null,\n        \"address\": null\n    },\n    {\n        \"id\": 30,\n        \"name\": \"William\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    },\n    {\n        \"id\": 31,\n        \"name\": \"William\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": null\n    }\n]"
						},
						{
							"name": "Get all with addresses",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/clients?size=10&page=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:18:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 26,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": {\n            \"id\": 3,\n            \"street\": \"Rua Piedade\",\n            \"number\": 226,\n            \"complement\": \"\",\n            \"reference\": \"\",\n            \"neighborhood\": \"Jardim LeocÃ¡dia\",\n            \"city\": \"Sorocaba\",\n            \"uf\": \"SP\",\n            \"zip_code\": \"18085-430\"\n        }\n    },\n    {\n        \"id\": 27,\n        \"name\": \"William Junior\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": {\n            \"id\": 3,\n            \"street\": \"Rua Piedade\",\n            \"number\": 226,\n            \"complement\": \"\",\n            \"reference\": \"\",\n            \"neighborhood\": \"Jardim LeocÃ¡dia\",\n            \"city\": \"Sorocaba\",\n            \"uf\": \"SP\",\n            \"zip_code\": \"18085-430\"\n        }\n    },\n    {\n        \"id\": 28,\n        \"name\": null,\n        \"email\": null,\n        \"cpf\": null,\n        \"address\": {\n            \"id\": 3,\n            \"street\": \"Rua Piedade\",\n            \"number\": 226,\n            \"complement\": \"\",\n            \"reference\": \"\",\n            \"neighborhood\": \"Jardim LeocÃ¡dia\",\n            \"city\": \"Sorocaba\",\n            \"uf\": \"SP\",\n            \"zip_code\": \"18085-430\"\n        }\n    },\n    {\n        \"id\": 29,\n        \"name\": null,\n        \"email\": null,\n        \"cpf\": null,\n        \"address\": {\n            \"id\": 3,\n            \"street\": \"Rua Piedade\",\n            \"number\": 226,\n            \"complement\": \"\",\n            \"reference\": \"\",\n            \"neighborhood\": \"Jardim LeocÃ¡dia\",\n            \"city\": \"Sorocaba\",\n            \"uf\": \"SP\",\n            \"zip_code\": \"18085-430\"\n        }\n    },\n    {\n        \"id\": 30,\n        \"name\": \"William\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": {\n            \"id\": 3,\n            \"street\": \"Rua Piedade\",\n            \"number\": 226,\n            \"complement\": \"\",\n            \"reference\": \"\",\n            \"neighborhood\": \"Jardim LeocÃ¡dia\",\n            \"city\": \"Sorocaba\",\n            \"uf\": \"SP\",\n            \"zip_code\": \"18085-430\"\n        }\n    },\n    {\n        \"id\": 31,\n        \"name\": \"William\",\n        \"email\": \"will@gmail.com\",\n        \"cpf\": \"436.377.998-55\",\n        \"address\": {\n            \"id\": 3,\n            \"street\": \"Rua Piedade\",\n            \"number\": 226,\n            \"complement\": \"\",\n            \"reference\": \"\",\n            \"neighborhood\": \"Jardim LeocÃ¡dia\",\n            \"city\": \"Sorocaba\",\n            \"uf\": \"SP\",\n            \"zip_code\": \"18085-430\"\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Update by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"William Junior\",\n    \"email\": \"will@gmail.com\",\n    \"cpf\": \"436.377.998-55\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/clients/{{client_id}}",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Update by id",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"William Junior\",\n    \"email\": \"will@gmail.com\",\n    \"cpf\": \"436.377.998-55\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/{{client_id}}"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:08:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/clients/{{client_id}}",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/{{client_id}}"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "29"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:02:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Client not found with id: 999"
						},
						{
							"name": "Delete by id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/{{client_id}}"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:03:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						},
						{
							"name": "bad request",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/id"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "131"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:03:19 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "Method parameter 'id': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: \"id\""
						}
					]
				},
				{
					"name": "Add address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/clients/{{client_id}}/address/{{address_id}}",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Add address",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/{{client_id}}/address/{{address_id}}"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:12:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						},
						{
							"name": "client already with address",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/{{client_id}}/address/{{address_id}}"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "29"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:15:56 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "Client already has an address"
						}
					]
				},
				{
					"name": "Remove address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/clients/{{client_id}}/address",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Remove address",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/clients/{{client_id}}"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:16:25 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "addresses",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"if (response != null) {",
									"    pm.collectionVariables.set(\"address_id\", response)",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.request)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"street\": \"Rua Piedade\",\n    \"number\": 226,\n    \"complement\": \"\",\n    \"reference\": \"\",\n    \"neighborhood\": \"Jardim Leocadia\",\n    \"city\": \"Sorocaba\",\n    \"uf\": \"SP\",\n    \"zip_code\": \"18085-430\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/addresses",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "create",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"street\": \"Rua Piedade\",\n    \"number\": 226,\n    \"complement\": \"\",\n    \"reference\": \"\",\n    \"neighborhood\": \"Jardim Leocadia\",\n    \"city\": \"Sorocaba\",\n    \"uf\": \"SP\",\n    \"zip_code\": \"18085-430\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/addresses"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "1"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:03:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "1"
						}
					]
				},
				{
					"name": "get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/addresses/{{address_id}}",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "get by id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/addresses/{{address_id}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:11:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"street\": \"Rua Piedade\",\n    \"number\": 226,\n    \"complement\": \"\",\n    \"reference\": \"\",\n    \"neighborhood\": \"Jardim LeocÃ¡dia\",\n    \"city\": \"Sorocaba\",\n    \"uf\": \"SP\",\n    \"zip_code\": \"18085-430\"\n}"
						}
					]
				},
				{
					"name": "get by zip code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/addresses/zip-code/18085-430",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "get by zip code",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/addresses/zip-code/18085-430"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:11:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"street\": \"Rua Piedade\",\n        \"number\": 226,\n        \"complement\": \"\",\n        \"reference\": \"\",\n        \"neighborhood\": \"Jardim LeocÃ¡dia\",\n        \"city\": \"Sorocaba\",\n        \"uf\": \"SP\",\n        \"zip_code\": \"18085-430\"\n    }\n]"
						},
						{
							"name": "get by zip code",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/addresses/zip-code/18085-430"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:13:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"street\": \"Rua Piedade\",\n        \"number\": 226,\n        \"complement\": \"\",\n        \"reference\": \"\",\n        \"neighborhood\": \"Jardim LeocÃ¡dia\",\n        \"city\": \"Sorocaba\",\n        \"uf\": \"SP\",\n        \"zip_code\": \"18085-430\"\n    },\n    {\n        \"id\": 2,\n        \"street\": \"Rua Piedade\",\n        \"number\": 228,\n        \"complement\": \"\",\n        \"reference\": \"\",\n        \"neighborhood\": \"Jardim LeocÃ¡dia\",\n        \"city\": \"Sorocaba\",\n        \"uf\": \"SP\",\n        \"zip_code\": \"18085-430\"\n    }\n]"
						}
					]
				},
				{
					"name": "search by zip code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/addresses/search-zip-code/18085430",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "search by zip code",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/addresses/search-zip-code/18085430"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:11:11 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": null,\n    \"street\": \"Rua Piedade\",\n    \"number\": null,\n    \"complement\": null,\n    \"reference\": null,\n    \"neighborhood\": \"Jardim LeocÃ¡dia\",\n    \"city\": \"Sorocaba\",\n    \"uf\": \"SP\",\n    \"zip_code\": \"18085-430\"\n}"
						}
					]
				},
				{
					"name": "get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/addresses?page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addresses"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "get all",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/addresses?page=0&size=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"addresses"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:13:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"street\": \"Rua Piedade\",\n        \"number\": 226,\n        \"complement\": \"\",\n        \"reference\": \"\",\n        \"neighborhood\": \"Jardim LeocÃ¡dia\",\n        \"city\": \"Sorocaba\",\n        \"uf\": \"SP\",\n        \"zip_code\": \"18085-430\"\n    },\n    {\n        \"id\": 2,\n        \"street\": \"Rua Piedade\",\n        \"number\": 228,\n        \"complement\": \"\",\n        \"reference\": \"\",\n        \"neighborhood\": \"Jardim LeocÃ¡dia\",\n        \"city\": \"Sorocaba\",\n        \"uf\": \"SP\",\n        \"zip_code\": \"18085-430\"\n    }\n]"
						}
					]
				},
				{
					"name": "Update by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"street\": \"Rua 7 de Setembro\",\n    \"number\": \"226\",\n    \"complement\": \"\",\n    \"reference\": \"\",\n    \"neighborhood\": \"Jardim Leocadia\",\n    \"city\": \"Sorocaba\",\n    \"uf\": \"SP\",\n    \"country\": \"Brasil\",\n    \"zip_code\": \"18085-430\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/addresses/{{address_id}}",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Update by id",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"street\": \"Rua 7 de Setembro\",\n    \"number\": \"226\",\n    \"complement\": \"\",\n    \"reference\": \"\",\n    \"neighborhood\": \"Jardim Leocadia\",\n    \"city\": \"Sorocaba\",\n    \"uf\": \"SP\",\n    \"country\": \"Brasil\",\n    \"zip_code\": \"18085-430\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/addresses/{{address_id}}"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:10:06 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/addresses/{{address_id}}",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": [
						{
							"name": "Delete by id",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_url}}/addresses/{{address_id}}"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 27 Jan 2025 22:13:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "client_id",
			"value": "2",
			"type": "string"
		},
		{
			"key": "address_id",
			"value": "1",
			"type": "string"
		}
	]
}